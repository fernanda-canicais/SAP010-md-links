// test/index.spec.js
const { mdLinks } = require("../src/index");

describe("mdLinks", () => {
  // Cenário: Arquivo único com links válidos
  test("Deve ler o arquivo com links válidos", () => {
    const filePath = "./src/arquivos/arquivo.md";
    const options = {};

    return mdLinks(filePath, options).then((links) => {
      expect(links).toEqual([
        {
          text: "Link 1",
          url: "https://exemplo.com/1",
          file: filePath,
        },
        {
          text: "Link 2",
          url: "https://exemplo.com/2",
          file: filePath,
        },
      ]);
    });
  });

  // Cenário: Arquivo vazio
  test("Deve retornar um array vazio para um arquivo vazio", () => {
    const filePath = "./src/arquivos/vazio.md";
    const options = {};

    return mdLinks(filePath, options).then((links) => {
      expect(links).toEqual([]);
    });
  });

  // Cenário: Diretório com arquivos .md e links válidos
  test("Deve ler o diretório com arquivos .md e retornar os links", () => {
    const diretorio = "./src/arquivos";
    const options = {};

    return mdLinks(diretorio, options).then((links) => {
      expect(links).toEqual([
        {
          text: "Link 1",
          url: "https://exemplo.com/1",
          file: `${diretorio}/arquivo.md`,
        },
        {
          text: "Link 2",
          url: "https://exemplo.com/2",
          file: `${diretorio}/arquivo.md`,
        },
      ]);
    });
  });

  // Cenário: Diretório sem arquivos .md
  test("Deve retornar um array vazio para um diretório sem arquivos .md", () => {
    const diretorio = "./src/arquivos";
    const options = {};

    return mdLinks(diretorio, options).then((links) => {
      expect(links).toEqual([]);
    });
  });

  // Cenário: Arquivo com link inválido e opção --validate
  test("Deve retornar status 404 e 'FAIL' para links inválidos", () => {
    const filePath = "./src/arquivos/arquivo.md";
    const options = { validate: true };

    return mdLinks(filePath, options).then((links) => {
      expect(links).toEqual([
        {
          text: "Link inválido",
          url: "https://linkinexistente.com",
          file: filePath,
          status: 404,
          ok: "FAIL",
        },
        {
          text: "Link 2",
          url: "https://exemplo.com/2",
          file: filePath,
          status: 200,
          ok: "ok",
        },
      ]);
    });
  });

  // Cenário: Opção --stats
  test("Deve retornar as estatísticas dos links encontrados", () => {
    const filePath = "./src/arquivos/arquivo.md";
    const options = { stats: true };

    return mdLinks(filePath, options).then((stats) => {
      expect(stats).toEqual({
        totalLinks: 2,
        uniqueLinks: 2,
      });
    });
  });

  // Cenário: Opções --validate e --stats
  test("Deve retornar as estatísticas dos links encontrados e validados", () => {
    const filePath = "./src/arquivos/arquivo.md";
    const options = { validate: true, stats: true };

    return mdLinks(filePath, options).then((stats) => {
      expect(stats).toEqual({
        totalLinks: 2,
        uniqueLinks: 2,
        uniqueBrokenLinks: 1,
      });
    });
  });
});
